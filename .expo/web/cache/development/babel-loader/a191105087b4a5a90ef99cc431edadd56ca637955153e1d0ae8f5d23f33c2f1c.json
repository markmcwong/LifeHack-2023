{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as Google from \"expo-auth-session/providers/google\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { Button, Icon } from \"native-base\";\nimport React, { useEffect, useState } from \"react\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { createNewUserRecord } from \"../../services/firestore\";\nimport firebase from \"firebase/compat/app\";\nimport store from \"../../state/store\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nWebBrowser.maybeCompleteAuthSession();\nvar GoogleLoginButton = function GoogleLoginButton() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    token = _useState2[0],\n    setToken = _useState2[1];\n  var _Google$useAuthReques = Google.useAuthRequest({\n      androidClientId: \"GOOGLE_GUID.apps.googleusercontent.com\",\n      iosClientId: \"507065659669-bkdja09me5njvtsf88mr4frid8jnu42h.apps.googleusercontent.com\",\n      expoClientId: \"507065659669-gkn8h09c1fe9hgvmom8t2n6sulr82ev9.apps.googleusercontent.com\"\n    }),\n    _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n    request = _Google$useAuthReques2[0],\n    response = _Google$useAuthReques2[1],\n    promptAsync = _Google$useAuthReques2[2];\n  useEffect(function () {\n    if ((response == null ? void 0 : response.type) === \"success\") {\n      var _response$authenticat, _response$authenticat2;\n      setToken(response.authentication.accessToken);\n      var credential = firebase.auth.GoogleAuthProvider.credential((_response$authenticat = response.authentication) == null ? void 0 : _response$authenticat.idToken, (_response$authenticat2 = response.authentication) == null ? void 0 : _response$authenticat2.accessToken);\n      firebase.auth().signInWithCredential(credential).then(function (result) {\n        var _result$additionalUse, _result$additionalUse2, _result$additionalUse3;\n        var user = result.user;\n        if ((_result$additionalUse = result.additionalUserInfo) != null && _result$additionalUse.isNewUser) {\n          createNewUserRecord(user == null ? void 0 : user.displayName, user == null ? void 0 : user.email, result.user.uid);\n        }\n        store.dispatch({\n          type: \"LOGIN\",\n          name: user == null ? void 0 : user.displayName,\n          uid: user == null ? void 0 : user.uid,\n          isNewUser: (_result$additionalUse2 = (_result$additionalUse3 = result.additionalUserInfo) == null ? void 0 : _result$additionalUse3.isNewUser) != null ? _result$additionalUse2 : false\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, [response, token]);\n  return _jsx(Button, {\n    borderColor: \"#b9b9b9\",\n    variant: \"outline\",\n    marginTop: 2,\n    onPress: function onPress() {\n      return promptAsync();\n    },\n    startIcon: _jsx(Icon, {\n      as: MaterialCommunityIcons,\n      name: \"google\",\n      size: 5\n    }),\n    children: \"Login with Google\"\n  });\n};\nexport default GoogleLoginButton;","map":{"version":3,"names":["Google","WebBrowser","Button","Icon","React","useEffect","useState","MaterialCommunityIcons","createNewUserRecord","firebase","store","jsx","_jsx","maybeCompleteAuthSession","GoogleLoginButton","_useState","_useState2","_slicedToArray","token","setToken","_Google$useAuthReques","useAuthRequest","androidClientId","iosClientId","expoClientId","_Google$useAuthReques2","request","response","promptAsync","type","_response$authenticat","_response$authenticat2","authentication","accessToken","credential","auth","GoogleAuthProvider","idToken","signInWithCredential","then","result","_result$additionalUse","_result$additionalUse2","_result$additionalUse3","user","additionalUserInfo","isNewUser","displayName","email","uid","dispatch","name","catch","error","console","log","borderColor","variant","marginTop","onPress","startIcon","as","size","children"],"sources":["/Users/chengchuan/Coding/Projects/LifeHack-2023/screens/auth/GoogleLoginButton.tsx"],"sourcesContent":["import * as Google from \"expo-auth-session/providers/google\";\nimport * as WebBrowser from \"expo-web-browser\";\n\nimport { Button, Icon } from \"native-base\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { createNewUserRecord } from \"../../services/firestore\";\nimport firebase from \"firebase/compat/app\";\nimport store from \"../../state/store\";\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst GoogleLoginButton = () => {\n  const [token, setToken] = useState(\"\");\n  const [request, response, promptAsync] = Google.useAuthRequest({\n    androidClientId: \"GOOGLE_GUID.apps.googleusercontent.com\",\n    iosClientId:\n      \"507065659669-bkdja09me5njvtsf88mr4frid8jnu42h.apps.googleusercontent.com\",\n    expoClientId:\n      \"507065659669-gkn8h09c1fe9hgvmom8t2n6sulr82ev9.apps.googleusercontent.com\",\n  });\n\n  useEffect(() => {\n    if (response?.type === \"success\") {\n      setToken(response.authentication!.accessToken);\n      const credential = firebase.auth.GoogleAuthProvider.credential(\n        response.authentication?.idToken,\n        response.authentication?.accessToken\n      );\n      firebase\n        .auth()\n        .signInWithCredential(credential)\n        .then((result) => {\n          var user = result.user;\n          if (result.additionalUserInfo?.isNewUser) {\n            createNewUserRecord(\n              user?.displayName!,\n              user?.email!,\n              result.user!.uid\n            );\n          }\n          store.dispatch({\n            type: \"LOGIN\",\n            name: user?.displayName,\n            uid: user?.uid,\n            isNewUser: result.additionalUserInfo?.isNewUser ?? false,\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [response, token]);\n\n  return (\n    <Button\n      borderColor=\"#b9b9b9\"\n      variant=\"outline\"\n      marginTop={2}\n      onPress={() => promptAsync()}\n      startIcon={<Icon as={MaterialCommunityIcons} name=\"google\" size={5} />}\n    >\n      Login with Google\n    </Button>\n  );\n};\n\nexport default GoogleLoginButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}