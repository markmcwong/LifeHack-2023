{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from \"../../primitives/Icon/Icons\";\nimport { AccordionItemContext } from \"./Context\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar AccordionIcon = function AccordionIcon(_ref, ref) {\n  var props = Object.assign({}, _ref);\n  var _React$useContext = React.useContext(AccordionItemContext),\n    isOpen = _React$useContext.isOpen;\n  var _useThemeProps = useThemeProps('AccordionIcon', props),\n    newProps = Object.assign({}, _useThemeProps);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? React.createElement(ChevronUpIcon, _extends({\n    color: \"white\"\n  }, newProps, {\n    ref: ref\n  })) : React.createElement(ChevronDownIcon, _extends({}, newProps, {\n    ref: ref\n  }));\n};\nexport default React.memo(React.forwardRef(AccordionIcon));","map":{"version":3,"names":["React","ChevronDownIcon","ChevronUpIcon","AccordionItemContext","useThemeProps","useHasResponsiveProps","AccordionIcon","_ref","ref","props","Object","assign","_React$useContext","useContext","isOpen","_useThemeProps","newProps","createElement","_extends","color","memo","forwardRef"],"sources":["/Users/chengchuan/Coding/Projects/LifeHack-2023/node_modules/native-base/lib/module/components/composites/Accordion/AccordionIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../primitives/Icon/Icons';\nimport type { IAccordionIconProps, IAccordionItemContextProps } from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionIcon = ({ ...props }: IAccordionIconProps, ref?: any) => {\n  const { isOpen }: IAccordionItemContextProps = React.useContext(\n    AccordionItemContext\n  );\n  const { ...newProps } = useThemeProps('AccordionIcon', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? (\n    <ChevronUpIcon color=\"white\" {...newProps} ref={ref} />\n  ) : (\n    <ChevronDownIcon {...newProps} ref={ref} />\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionIcon));\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,aAA1B;AAEA,SAASC,oBAAT;AACA,SAASC,aAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAuCC,GAApC,EAAkD;EAAA,IAA5CC,KAAA,GAAAC,MAAA,CAAAC,MAAA,KAAAJ,IAAA;EAC1B,IAAAK,iBAAA,GAA+CZ,KAAK,CAACa,UAAN,CAC7CV,oBAD6C,CAA/C;IAAQW,MAAA,GAAAF,iBAAA,CAAAE,MAAA;EAGR,IAAAC,cAAA,GAAwBX,aAAa,CAAC,eAAD,EAAkBK,KAAlB,CAArC;IAAWO,QAAA,GAAAN,MAAA,CAAAC,MAAA,KAAAI,cAAA;EAEX,IAAIV,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OAAOK,MAAM,GACXd,KAAA,CAAAiB,aAAA,CAACf,aAAD,EAAAgB,QAAA;IAAeC,KAAK,EAAC;EAArB,GAAiCH,QAAjC;IAA2CR,GAAG,EAAEA;EAAhD,GADW,GAGXR,KAAA,CAAAiB,aAAA,CAAChB,eAAD,EAAAiB,QAAA,KAAqBF,QAArB;IAA+BR,GAAG,EAAEA;EAApC,GAHF;AAKD,CAdD;AAgBA,eAAeR,KAAK,CAACoB,IAAN,CAAWpB,KAAK,CAACqB,UAAN,CAAiBf,aAAjB,CAAX,CAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}