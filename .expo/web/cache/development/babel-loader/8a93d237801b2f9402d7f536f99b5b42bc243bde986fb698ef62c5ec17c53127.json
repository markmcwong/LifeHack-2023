{"ast":null,"code":"import * as React from \"react\";\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport NewUserStack from \"./newUserNavigator\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport OnboardingStack from \"./AuthNavigation\";\nimport PersonDetail from \"../screens/PersonDetail\";\nimport chatBox from \"../screens/chatBox\";\nimport { connect } from \"react-redux\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar mapStateToProps = function mapStateToProps(state, props) {\n  return {\n    user: state.user\n  };\n};\nvar RootNavigator = function RootNavigator(props) {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [props.user.uid == null ? _jsx(Stack.Screen, {\n      name: \"NoAuth\",\n      component: OnboardingStack\n    }) : props.user.isNewUser ? _jsx(Stack.Screen, {\n      name: \"NewUser\",\n      component: NewUserStack\n    }) : _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Auth\",\n        component: BottomTabNavigator\n      }), _jsx(Stack.Screen, {\n        name: \"PersonDetailScreen\",\n        component: PersonDetail,\n        options: {\n          headerShown: false,\n          headerTitle: null\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Conversation\",\n        component: chatBox,\n        options: {\n          headerShown: false,\n          headerTitle: null\n        }\n      })]\n    }), _jsx(Stack.Screen, {\n      name: \"NotFound\",\n      component: NotFoundScreen,\n      options: {\n        title: \"Oops!\"\n      }\n    })]\n  });\n};\nexport default connect(mapStateToProps)(RootNavigator);","map":{"version":3,"names":["React","BottomTabNavigator","NewUserStack","NotFoundScreen","OnboardingStack","PersonDetail","chatBox","connect","createStackNavigator","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Stack","mapStateToProps","state","props","user","RootNavigator","Navigator","screenOptions","headerShown","children","uid","Screen","name","component","isNewUser","options","headerTitle","title"],"sources":["/Users/chengchuan/Coding/Projects/LifeHack-2023/navigation/RootNavigator.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport BottomTabNavigator from \"./BottomTabNavigator\";\nimport NewUserStack from \"./newUserNavigator\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport OnboardingStack from \"./AuthNavigation\";\nimport PersonDetail from \"../screens/PersonDetail\";\nimport { RootStackParamList } from \"../types\";\nimport chatBox from \"../screens/chatBox\";\nimport { connect } from \"react-redux\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst mapStateToProps = (state: any, props: any) => {\n  return { user: state.user };\n};\n\nconst RootNavigator = (props: any) => {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      {props.user.uid == null ? (\n        // No token found, user isn't signed in\n        <Stack.Screen name=\"NoAuth\" component={OnboardingStack} />\n      ) : props.user.isNewUser ? (\n        // User is signed in, but new user\n        <Stack.Screen name=\"NewUser\" component={NewUserStack} />\n      ) : (\n        // User is signed in and not a new user\n        <>\n          <Stack.Screen name=\"Auth\" component={BottomTabNavigator} />\n          <Stack.Screen\n            name=\"PersonDetailScreen\"\n            component={PersonDetail}\n            options={{\n              headerShown: false,\n              headerTitle: null,\n            }}\n          />\n          <Stack.Screen\n            name=\"Conversation\"\n            component={chatBox}\n            options={{\n              headerShown: false,\n              headerTitle: null,\n            }}\n          />\n        </>\n      )}\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n    </Stack.Navigator>\n  );\n};\n\nexport default connect(mapStateToProps)(RootNavigator);\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,kBAAkB;AACzB,OAAOC,YAAY;AACnB,OAAOC,cAAc;AACrB,OAAOC,eAAe;AACtB,OAAOC,YAAY;AAEnB,OAAOC,OAAO;AACd,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,oBAAoB,QAAQ,yBAAyB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE/D,IAAMC,KAAK,GAAGP,oBAAoB,CAAqB,CAAC;AAExD,IAAMQ,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,KAAU,EAAEC,KAAU,EAAK;EAClD,OAAO;IAAEC,IAAI,EAAEF,KAAK,CAACE;EAAK,CAAC;AAC7B,CAAC;AAED,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIF,KAAU,EAAK;EACpC,OACEJ,KAAA,CAACC,KAAK,CAACM,SAAS;IAACC,aAAa,EAAE;MAAEC,WAAW,EAAE;IAAM,CAAE;IAAAC,QAAA,GACpDN,KAAK,CAACC,IAAI,CAACM,GAAG,IAAI,IAAI,GAErBf,IAAA,CAACK,KAAK,CAACW,MAAM;MAACC,IAAI,EAAC,QAAQ;MAACC,SAAS,EAAExB;IAAgB,CAAE,CAAC,GACxDc,KAAK,CAACC,IAAI,CAACU,SAAS,GAEtBnB,IAAA,CAACK,KAAK,CAACW,MAAM;MAACC,IAAI,EAAC,SAAS;MAACC,SAAS,EAAE1B;IAAa,CAAE,CAAC,GAGxDY,KAAA,CAAAF,SAAA;MAAAY,QAAA,GACEd,IAAA,CAACK,KAAK,CAACW,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,SAAS,EAAE3B;MAAmB,CAAE,CAAC,EAC3DS,IAAA,CAACK,KAAK,CAACW,MAAM;QACXC,IAAI,EAAC,oBAAoB;QACzBC,SAAS,EAAEvB,YAAa;QACxByB,OAAO,EAAE;UACPP,WAAW,EAAE,KAAK;UAClBQ,WAAW,EAAE;QACf;MAAE,CACH,CAAC,EACFrB,IAAA,CAACK,KAAK,CAACW,MAAM;QACXC,IAAI,EAAC,cAAc;QACnBC,SAAS,EAAEtB,OAAQ;QACnBwB,OAAO,EAAE;UACPP,WAAW,EAAE,KAAK;UAClBQ,WAAW,EAAE;QACf;MAAE,CACH,CAAC;IAAA,CACF,CACH,EACDrB,IAAA,CAACK,KAAK,CAACW,MAAM;MACXC,IAAI,EAAC,UAAU;MACfC,SAAS,EAAEzB,cAAe;MAC1B2B,OAAO,EAAE;QAAEE,KAAK,EAAE;MAAQ;IAAE,CAC7B,CAAC;EAAA,CACa,CAAC;AAEtB,CAAC;AAED,eAAezB,OAAO,CAACS,eAAe,CAAC,CAACI,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}